# -*- coding: utf-8 -*-
"""DScover 최종프로젝트_굿잡_취업을 한번에

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qTgrNEeIYNWRG1LDg2jVbID5parNnz9l
"""

import matplotlib.font_manager as fm
fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'
font = fm.FontProperties(fname=fontpath, size=9)

pip install --upgrade matplotlib

# Commented out IPython magic to ensure Python compatibility.
# %config InlineBackend.figure_format = 'retina'
!apt -qq -y install fonts-nanum > /dev/null

! pip install openpyxl==3.0.9
! pip install pyLDAvis==3.3.1
! pip install wordcloud
! pip install pandas==1.3.5
! pip install numpy==1.21.5
! pip install shap
! pip install tensorflow==2.3.0

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fy
!rm ~/.cache/matplotlib -rf

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# apt-get update
# apt-get install g++ openjdk-8-jdk python-dev python3-dev
# pip3 install JPype1
# pip3 install konlpy==0.6.0

import openpyxl
import konlpy
from konlpy.tag import  Okt
from konlpy.utils import pprint
import pandas as pd
import numpy as np
import regex as re
from collections import Counter
from itertools import chain
from konlpy.tag import Twitter
import sklearn
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.preprocessing import normalize
import networkx
import math
import ast
from nltk import FreqDist
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from PIL import Image
from functools import reduce
import pyLDAvis
import pyLDAvis.sklearn
from sklearn.decomposition import LatentDirichletAllocation, TruncatedSVD
from sklearn.model_selection import GridSearchCV
from pprint import pprint
from glob import glob
import seaborn as sns
import warnings
import plotly.express as px
import plotly.graph_objects as go
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_samples
from PIL import Image
from sklearn.preprocessing import MinMaxScaler
import folium
from folium import plugins
import matplotlib as mpl
import matplotlib.font_manager as fm
import json
from sklearn.model_selection import train_test_split
import tensorflow as tf
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dropout, Dense
from tensorflow.keras.optimizers import Adam
import shap
from statistics import mean
from math import pi

from google.colab import drive
drive.mount("/content/drive", force_remount=True)

warnings.filterwarnings('ignore')

"""# 2022년 3분기 재무 데이터 불러오기"""

JM = pd.read_csv("/content/drive/MyDrive/DScover/2022_3분기보고서_01_재무상태표_20221201.txt", delimiter = '\t',
                     encoding = "cp949")
LP1 = pd.read_csv("/content/drive/MyDrive/DScover/2022_3분기보고서_02_손익계산서_20221201.txt", delimiter = '\t',
                     encoding = "cp949")
LP2 = pd.read_csv("/content/drive/MyDrive/DScover/2022_3분기보고서_03_포괄손익계산서_20221201.txt", delimiter = '\t',
                     encoding = "cp949")

MF = pd.read_csv("/content/drive/MyDrive/DScover/2022_3분기보고서_04_현금흐름표_20221201.txt", delimiter = '\t',
                     encoding = "cp949")

LP_concat = pd.concat([LP1, LP2], axis = 0)

# 각 데이터마다 칼럼값 맞춰주기
from folium.elements import JSCSSMixin
JM = JM.rename(columns = {"당기 3분기말" : "당기3분기"}).drop(["Unnamed: 15", "전기말", "전전기말"], axis = 1)

MF = MF.rename(columns = {"당기 3분기" : "당기3분기",
                                       "전기 3분기" : "전기3분기"})

LP1 = LP1.rename(columns = {"당기 3분기 누적" : "당기3분기",
                                           "전기 3분기 누적" : "전기3분기"}).drop(["당기 3분기 3개월", "전기 3분기 3개월"], axis = 1)

LP2 = LP2.rename(columns = {"당기 3분기 누적" : "당기3분기",
                                           "전기 3분기 누적" : "전기3분기"}).drop(["당기 3분기 3개월", "전기 3분기 3개월"], axis = 1)

Fin_data = pd.concat([JM,MF,LP1,LP2]).drop(["재무제표종류", "결산월", "결산기준일", "보고서종류", "통화"], axis = 1)
Fin_data = Fin_data.reset_index(drop = True)

name_clean = []

for i in Fin_data["항목명"] :
    i = i.replace(" ", "")
    name_clean.append(i)
Fin_data["항목명"] = name_clean

# 2021년의 재무 데이터 불러오기
JM_2021 = pd.read_csv("/content/drive/MyDrive/DScover/2021_3분기보고서_01_재무상태표_20221110.txt", delimiter = '\t',
                     encoding = "cp949")

JM_2021 = JM_2021.rename(columns = {"당기 3분기말" : "2021년3분기_재무상태"}).drop(["Unnamed: 15", "전기말", "전전기말"],
                                                                                  axis = 1)

name_clean = []

for i in JM_2021["항목명"] :
  i = i.replace(" ", "")
  name_clean.append(i)
JM_2021["항목명"] = name_clean

Fin_data = pd.merge(left=Fin_data, right=JM_2021[["회사명", "항목명", "2021년3분기_재무상태"]], how='left', 
                  on=['회사명','항목명'], sort=False)

Fin_data = Fin_data.rename(columns = {"2021년3분기_재무상태" : "전기3분기_재무상태",
                                     "전기3분기" : "전기3분기_손익계산+현금흐름"})
Fin_data = Fin_data.drop_duplicates()
Fin_data

Fin_data = Fin_data.drop(["전기", "전전기"], axis = 1)

Fin_data.head()

# 자본총계를 의미하는 서로 다른 용어들을 통일
List = ["당분기말","분기말자본" ,"기말" ,"분기말",
        "반기말자본" , "기말자본",
        "IV.기말자본", "분기말잔액","당반기말",
        "당기말" ,"당기말자본", "3분기말자본"]

for change in List :
    # List에 들어간 용어들 "자본총계"로 치환
    Fin_data["항목명"] = Fin_data["항목명"].replace(change, "자본총계")

# 항목명이 "자기주식의취득"이면서 항목코드가 "ifrs-full_Equity"인 경우는 잘못 기입된 경우로 판단하여, 데이터에서 삭제
idx = Fin_data[(Fin_data["항목명"] == "자기주식의취득") & (Fin_data["항목코드"] == "ifrs-full_Equity")].index
Fin_data = Fin_data.drop(index = idx, axis = 0)

# 유동자산을 의미하는 서로 다른 용어들을 통일
List = ["Ⅰ.유동자산", "I.유동자산", "l.유동자산"]

for change in List :
    # List에 들어간 용어들 유동자산으로 치환
    Fin_data["항목명"] = Fin_data["항목명"].replace(change, "유동자산")

# 유동부채를 의미하는 서로 다른 용어들을 통일
List = ["Ⅰ.유동부채", "I.유동부채", "l.유동부채"]

for change in List :
    # List에 들어간 용어들 유동부채로 치환
    Fin_data["항목명"] = Fin_data["항목명"].replace(change, "유동부채")

# 고정자산(=비유동자산)을 의미하는 서로 다른 용어들을 통일
List = ["비유동자산", "Ⅱ.비유동자산", "ll.비유동자산", "II.비유동자산"]

for change in List :
    # List에 들어간 용어들 고정자산으로 치환
    Fin_data["항목명"] = Fin_data["항목명"].replace(change, "고정자산")

# 부채비율 계산
total_liability = Fin_data[Fin_data["항목명"] == "부채총계"][["회사명", "당기3분기"]].rename(columns = {"당기3분기" : "부채총계"})
total_capital = Fin_data[Fin_data["항목명"] == "자본총계"][["회사명", "당기3분기"]].rename(columns = {"당기3분기" : "자본총계"})

# 부채총계, 자본총계를 회사명을 기준으로 결합한 뒤 계산
liability_proportion = pd.merge(total_liability, total_capital,
        left_on = "회사명", right_on = "회사명", how = "inner")
liability_proportion["부채총계"] = liability_proportion["부채총계"].str.replace(",", "").astype(float)
liability_proportion["자본총계"] = liability_proportion["자본총계"].str.replace(",", "").astype(float)
liability_proportion["부채비율"] = liability_proportion["부채총계"]*100/liability_proportion["자본총계"]
liability_proportion.head()

# 유동비율 계산
current_asset = Fin_data[Fin_data["항목명"] == "유동자산"][["회사명", "당기3분기"]].rename(columns = {"당기3분기" : "유동자산"})
current_liability = Fin_data[Fin_data["항목명"] == "유동부채"][["회사명", "당기3분기"]].rename(columns = {"당기3분기" : "유동부채"})

# 유동자산, 유동부채를 회사명을 기준으로 결합한 뒤 계산
current_proportion = pd.merge(current_asset, current_liability,
        left_on = "회사명", right_on = "회사명", how = "inner")
current_proportion["유동자산"] = current_proportion["유동자산"].str.replace(",", "").astype(float)
current_proportion["유동부채"] = current_proportion["유동부채"].str.replace(",", "").astype(float)
current_proportion["유동비율"] = current_proportion["유동자산"]*100/current_proportion["유동부채"]
current_proportion.head()

# 고정비율 계산
fixed_asset = Fin_data[Fin_data["항목명"] == "고정자산"][["회사명", "당기3분기"]].rename(columns = {"당기3분기" : "고정자산"})

# 고정자산, 자본총계를 회사명을 기준으로 결합한 뒤 계산
fixed_proportion = pd.merge(fixed_asset, total_capital ,
        left_on = "회사명", right_on = "회사명", how = "inner")
fixed_proportion["고정자산"] = fixed_proportion["고정자산"].str.replace(",", "").astype(float)
fixed_proportion["자본총계"] = fixed_proportion["자본총계"].str.replace(",", "").astype(float)
fixed_proportion["고정비율"] = fixed_proportion["고정자산"]*100/fixed_proportion["자본총계"]
fixed_proportion.head()

# 매출액을 의미하는 서로 다른 용어들을 통일
List = ['I.매출', 'I.매출액','I.영업수익','Ⅰ.매출','Ⅰ.매출액',
 'Ⅰ.영업수익','고객과의계약에서생기는수익','매출','매출(영업수익)',
 '매출및지분법손익','매출액','매출액(매출액)','매출액(영업수익)',
 '매출액(주석23)','매출액.','매출액및지분법손익','수익','수익(매출과지분법손익)',
 '수익(매출액)','수익(순매출액)', '영업수익(매출)']

for change in List :
    # List에 들어간 용어들 매출액으로 치환
    Fin_data["항목명"] = Fin_data["항목명"].replace(change, "매출액")

# 항목코드가 "ifrs-full_GrossProfit"이거나 "dart_OperatingIncomeLoss"인 영업수익을 제외한 나머지 영업수익을 "매출액"으로 용어 치환
index = Fin_data[(Fin_data["항목명"] == "영업수익") & 
                 (Fin_data["항목코드"] != "ifrs-full_GrossProfit") & 
                                                (Fin_data["항목코드"] != "dart_OperatingIncomeLoss")]["항목명"].index
Fin_data.loc[index,"항목명"] = "매출액"


# 항목코드가 "ifrs-full_GrossProfit"인 영업수익(매출액)을 제외한 나머지 영업수익(매출액)을 "매출액"으로 용어 치환
index = Fin_data[(Fin_data["항목명"] == "영업수익(매출액)") & (Fin_data["항목코드"] != "ifrs-full_GrossProfit")]["항목명"].index
Fin_data.loc[index,"항목명"] = "매출액"

# 영업이익을 의미하는 서로 다른 용어들을 통일
List = ['영업이익(손실)', '영업손익', 'V.영업손익',
        '영업손실', 'Ⅳ.영업이익(손실)', 'Ⅳ.영업이익','Ⅲ.영업이익',
        'V.영업이익(손실)', 'Ⅴ.영업이익', 'III.영업이익', 'IV.영업이익', 
        'III.영업이익(손실)','IV.영업이익(손실)', 'Ⅴ.영업손실', 'Ⅴ.영업이익(손실)',
        '정상영업손익']

for change in List :
    # List에 들어간 용어들 영업이익으로 치환
    Fin_data["항목명"] = Fin_data["항목명"].replace(change, "영업이익")

# 항목코드가 "dart_OperatingIncomeLoss"이지만 항목명이 "영업수익"인 경우, 잘못 기입된 데이터로 판단하여 제거
index = Fin_data[(Fin_data["항목명"] == "영업수익") & (Fin_data["항목코드"] == "dart_OperatingIncomeLoss")]["항목명"].index
Fin_data = Fin_data.drop(index = index, axis= 0 )

# 법인세비용차감전순이익을 의미하는 서로 다른 용어들을 통일
# '법인세비용차감전순이익', '법인세차감전순이익'를 제외한, 항목코드가 "ifrs-full_ProfitLossBeforeTax"인 항목명들 리스트로 입력
List = Fin_data[Fin_data["항목코드"] == "ifrs-full_ProfitLossBeforeTax"]["항목명"].unique().tolist()
List = np.delete(List,[List.index('법인세비용차감전순이익'),List.index('법인세차감전순이익')])

for change in List :
    # List에 들어간 용어들 법인세비용차감전순이익으로 치환
    Fin_data["항목명"] = Fin_data["항목명"].replace(change, "세전순이익")

# 항목명이 "법인세비용차감전순이익"  이거나 "법인세차감전순이익"이고 항목코드가 "ifrs-full_ProfitLossBeforeTax"인 경우, "세전순이익"으로 용어 치환
index = Fin_data[((Fin_data["항목명"] == "법인세비용차감전순이익") | (Fin_data["항목명"] == "법인세차감전순이익")) & 
                 (Fin_data["항목코드"] == "ifrs-full_ProfitLossBeforeTax")]["항목명"].index
Fin_data.loc[index,"항목명"] = "세전순이익"

Fin_data[Fin_data["항목명"] == "세전순이익"].shape

# 매출액영업이익률 계산
operating_income = Fin_data[Fin_data["항목명"] == "영업이익"][["회사명", "당기3분기"]].rename(columns = {"당기3분기" : "영업이익"})
sales_revenue = Fin_data[Fin_data["항목명"] == "매출액"][["회사명", "당기3분기"]].rename(columns = {"당기3분기" : "매출액"})

# 매출액이 두 가지로 나오는 "나노신소재" 의 경우는 잘못 기입된 경우로 판단하여 해당 기업을 데이터에서 삭제
sales_revenue[sales_revenue["회사명"] == "나노신소재"]
index = sales_revenue[sales_revenue["회사명"] == "나노신소재"].index
sales_revenue = sales_revenue.drop(index = index, axis = 0)

# 영업이익, 매출액을 회사명을 기준으로 결합한 뒤 계산
sales_operating_profit_margin = pd.merge(operating_income, sales_revenue,
        left_on = "회사명", right_on = "회사명", how = "inner")
sales_operating_profit_margin["영업이익"] = sales_operating_profit_margin["영업이익"].str.replace(",", "").astype(float)
sales_operating_profit_margin["매출액"] = sales_operating_profit_margin["매출액"].str.replace(",", "").astype(float)
sales_operating_profit_margin["매출액영업이익률"] = sales_operating_profit_margin["영업이익"]*100/sales_operating_profit_margin["매출액"]
sales_operating_profit_margin.head()

# 매출액세전순이익률 계산
income_beforetax = Fin_data[Fin_data["항목명"] == "세전순이익"][["회사명", "당기3분기"]].rename(columns = {"당기3분기" : "세전순이익"})

# 세전순이익, 매출액을 회사명을 기준으로 결합한 뒤 계산
net_income_beforetax = pd.merge(income_beforetax, sales_revenue,
        left_on = "회사명", right_on = "회사명", how = "inner")
net_income_beforetax["세전순이익"] = net_income_beforetax["세전순이익"].str.replace(",", "").astype(float)
net_income_beforetax["매출액"] = net_income_beforetax["매출액"].str.replace(",", "").astype(float)
net_income_beforetax["매출액세전순이익률"] = net_income_beforetax["세전순이익"]*100/net_income_beforetax["매출액"]
net_income_beforetax.head()

# 매출액증가율 계산
sales_growth_rate = Fin_data[Fin_data["항목명"] == "매출액"][["회사명", "당기3분기", "전기3분기_손익계산+현금흐름"]].rename(columns = {"당기3분기" : "당기매출액",
                                                                                         "전기3분기_손익계산+현금흐름" : "전기매출액"})
sales_growth_rate["당기매출액"] = sales_growth_rate["당기매출액"].str.replace(",", "").astype(float)
sales_growth_rate["전기매출액"] = sales_growth_rate["전기매출액"].str.replace(",", "").astype(float)

# 전기매출액이 0인 경우는 잘못 기입된 경우로 판단하여 제거
index = sales_growth_rate[sales_growth_rate["전기매출액"] == 0].index
sales_growth_rate = sales_growth_rate.drop(index = index, axis= 0 )

sales_growth_rate["매출액증가율"] = ( sales_growth_rate["당기매출액"]*100/sales_growth_rate["전기매출액"] ) - 100
sales_growth_rate.head()

# 영업이익증가율
operating_profit_growth_rate = Fin_data[Fin_data["항목명"] == "영업이익"][["회사명", "당기3분기", "전기3분기_손익계산+현금흐름"]].rename(columns = {"당기3분기" : "당기영업이익",
                                                                                         "전기3분기_손익계산+현금흐름" : "전기영업이익"})
operating_profit_growth_rate["당기영업이익"] = operating_profit_growth_rate["당기영업이익"].str.replace(",", "").astype(float)
operating_profit_growth_rate["전기영업이익"] = operating_profit_growth_rate["전기영업이익"].str.replace(",", "").astype(float)

operating_profit_growth_rate["영업이익증가율"] = ( operating_profit_growth_rate["당기영업이익"] - operating_profit_growth_rate["전기영업이익"] ) * 100 /operating_profit_growth_rate["전기영업이익"]
operating_profit_growth_rate.head()

# 총자산회전율 계산
total_asset = Fin_data[Fin_data["항목명"] == "자산총계"][["회사명", "당기3분기"]].rename(columns = {"당기3분기" : "자산총계"})

# 매출액과 자산총계를 회사명을 기준으로 결합한 뒤 계산
total_asset_turnover_ratio = pd.merge(sales_revenue,total_asset,
        left_on = "회사명", right_on = "회사명", how = "inner")
total_asset_turnover_ratio["자산총계"] = total_asset_turnover_ratio["자산총계"].str.replace(",", "").astype(float)
total_asset_turnover_ratio["매출액"] = total_asset_turnover_ratio["매출액"].str.replace(",", "").astype(float)
total_asset_turnover_ratio["총자산회전율"] = total_asset_turnover_ratio["매출액"]/total_asset_turnover_ratio["자산총계"]
total_asset_turnover_ratio.head()

# 고정자산회전율 계산
# 매출액과 고정자산을 회사명을 기준으로 결합한 뒤 계산
fixed_asset_turnover_ratio = pd.merge(sales_revenue,fixed_asset,
        left_on = "회사명", right_on = "회사명", how = "inner")
fixed_asset_turnover_ratio["고정자산"] = fixed_asset_turnover_ratio["고정자산"].str.replace(",", "").astype(float)
fixed_asset_turnover_ratio["매출액"] = fixed_asset_turnover_ratio["매출액"].str.replace(",", "").astype(float)
fixed_asset_turnover_ratio["고정자산회전율"] =fixed_asset_turnover_ratio["매출액"]/fixed_asset_turnover_ratio["고정자산"]
fixed_asset_turnover_ratio.head()

# 당기순이익을 의미하는 서로 다른 용어들을 통일
List = Fin_data[Fin_data["항목코드"] == "ifrs-full_ProfitLoss"]["항목명"].unique()

for change in List :
    # List에 들어간 용어들 당기순이익으로 치환
    Fin_data["항목명"] = Fin_data["항목명"].replace(change, "당기순이익")

# 항목명이 "당기순이익"이지만 항목코드가 "ifrs-full_ProfitLoss"가 아닌 경우, 잘못 기입된 경우로 판단하여 제거
index = Fin_data[(Fin_data["항목코드"] != "ifrs-full_ProfitLoss") &
                 (Fin_data["항목명"] == "당기순이익")].index
Fin_data = Fin_data.drop(index = index, axis= 0 )

Fin_data

stock = pd.read_csv('/content/drive/MyDrive/DScover/1205_주가데이터.csv', encoding = "euc-kr")

stock = stock[["종목명", "종가", "시가총액", "상장주식수"]].rename(columns = {"종목명" : "회사명",
                                                                "종가" : "주가"})

stock

# PER 계산
net_income = Fin_data[Fin_data["항목명"] == "당기순이익"][["회사명", "당기3분기"]].rename(columns = {"당기3분기" : "당기순이익"})

# 회사명을 기준으로 결합한 뒤 계산
PER = pd.merge(net_income, stock[["회사명", "시가총액"]],
        left_on = "회사명", right_on = "회사명", how = "inner")

PER["당기순이익"] = PER["당기순이익"].str.replace(",", "").astype(float)

PER["PER"] = PER["시가총액"]/PER["당기순이익"]
PER.head()

PER

# PBR 계산
# 자산총계와 부채총계, 상장주식수를 회사명을 기준으로 결합한 뒤 계산
PBR = pd.merge(total_asset, total_liability,
        left_on = "회사명", right_on = "회사명", how = "inner")
PBR = pd.merge(PBR, stock[["회사명", "상장주식수", "주가"]],
        left_on = "회사명", right_on = "회사명", how = "inner")

PBR["자산총계"] = PBR["자산총계"].str.replace(",", "").astype(float)
PBR["부채총계"] = PBR["부채총계"].str.replace(",", "").astype(float)

PBR["주당순자산"] = (PBR["자산총계"] - PBR["부채총계"])/PBR["상장주식수"]
PBR["PBR"] = PBR["주가"]/PBR["주당순자산"]
PBR.head()

dfs = [liability_proportion,
      current_proportion,
      fixed_proportion,
      sales_operating_profit_margin,
      net_income_beforetax,
      sales_growth_rate,
      operating_profit_growth_rate,
      total_asset_turnover_ratio,
      fixed_asset_turnover_ratio,
       PER, 
       PBR]
financial_state = reduce(lambda left, right: 
                         pd.merge(left, right, on = "회사명"),
                        dfs)

# 중복 행, 중복 열 제거
financial_state = financial_state.drop_duplicates().reset_index(drop = True)
financial_state = financial_state.loc[:, ~financial_state.T.duplicated()]

# 열 이름 가독성을 고려하여 치환
financial_state = financial_state.rename(columns = {"부채총계_x" : "부채총계",
                                                    "자본총계_x" : "자본총계",
                                 "고정자산_x" : "고정자산",
                                 "매출액_x" : "매출액",
                                 "자산총계_x" : "자산총계"})

financial_state

import pandas as pd

Fin_data.info()

# 기업별 업종 데이터 불러오기
industry = Fin_data[['회사명','업종명']].drop_duplicates().reset_index(drop=True)

Fin_industry = pd.merge(industry, financial_state, how='inner', on='회사명')
Fin_industry.head()

industry_num = pd.DataFrame(Fin_industry["업종명"].value_counts(ascending = False))
industry_num.rename(columns = {"업종명" : "업종별_기업개수"}, inplace = True)
industry_num["업종명"] = industry_num.index

plt.rc('font', family='NanumBarunGothic')
num_plot = sns.barplot(data = industry_num,
                       x = "업종명",
                       y = "업종별_기업개수")
num_plot.axes.xaxis.set_ticks([])
num_plot.set_xlabel("업종")
num_plot.set_ylabel("업종별 기업개수")

sns.set(rc={'figure.figsize':(10,8)})
plt.show()

# 업종별 기업개수가 1개이거나 2개인 업종 제거
industry_onetwo = industry_num[(industry_num["업종별_기업개수"] == 1) | (industry_num["업종별_기업개수"] == 2)].index

for onetwo in industry_onetwo :
  Fin_industry = Fin_industry.loc[Fin_industry["업종명"] != onetwo]

Fin_industry = Fin_industry[["회사명", "업종명","부채비율", "유동비율", "고정비율",
              "매출액영업이익률", "매출액세전순이익률",
              "매출액증가율", "영업이익증가율", "총자산회전율", "고정자산회전율",
              "PER", "PBR"]]

# 안정성 재무지표 시각화
stability_df = Fin_industry.groupby(['업종명'],as_index=False)[["부채비율", "유동비율", '고정비율']].mean().head(6)

figure, ((ax1,ax2,ax3)) = plt.subplots(nrows=1, ncols=3)
figure.set_size_inches(18,8)

plt.rc('font', family='NanumBarunGothic')
liability = sns.barplot(data = stability_df.sort_values("부채비율", ascending = False),
            x = "업종명", 
            y = '부채비율',
            ax = ax1,
            palette='coolwarm')
liability.set_xticklabels(liability.get_xticklabels(),rotation = 45)
liability.set_xlabel("업종명")
liability.set_ylabel("부채비율")
liability.set_title('업종별 부채비율')
liability.set(ylim = (0, 125))

current = sns.barplot(data = stability_df,
            x = "업종명", 
            y = '유동비율',
            ax = ax2,
            palette='coolwarm')
current.set_xticklabels(current.get_xticklabels(),rotation = 45)
current.set_xlabel("업종명")
current.set_ylabel("유동비율")
current.set_title("업종별 유동비율")
current.set(ylim = (0, 1200))

fix = sns.barplot(data = stability_df,
            x = "업종명", 
            y = '고정비율',
            ax = ax3,
            palette='coolwarm')
fix.set_xticklabels(fix.get_xticklabels(),rotation = 45)
fix.set_xlabel("업종명")
fix.set_ylabel("고정비율")
fix.set_title('업종별 고정비율')
fix.set(ylim = (0, 200))
plt.show()

# 수익성 재무지표 시각화
profitability_df = Fin_industry.groupby(['업종명'],as_index=False)[["매출액영업이익률", "매출액세전순이익률"]].mean().head(6)


figure, ((ax1,ax2)) = plt.subplots(nrows=1, ncols=2)
figure.set_size_inches(18,8)

plt.rc('font',family='NanumGothic')
profit = sns.barplot(data = profitability_df,
            x = "업종명", 
            y = '매출액영업이익률',
            ax = ax1,
            palette='coolwarm')
profit.set_xticklabels(profit.get_xticklabels(),rotation = 45)
profit.set_xlabel("업종명")
profit.set_ylabel("매출액영업이익률")
profit.set_title('업종별 매출액영업이익률')
profit.set(ylim = (0, 15))

before_tax_profit = sns.barplot(data = profitability_df,
            x = "업종명", 
            y = '매출액세전순이익률',
            ax = ax2,
            palette='coolwarm')
before_tax_profit.set_xticklabels(before_tax_profit.get_xticklabels(),rotation = 45)
before_tax_profit.set_xlabel("업종명")
before_tax_profit.set_ylabel("매출액세전순이익률")
before_tax_profit.set_title('업종별 매출액세전순이익률')
before_tax_profit.set(ylim = (0, 20))

# 성장성 재무지표 시각화
growth_df = Fin_industry.groupby(['업종명'],as_index=False)[["매출액증가율", "영업이익증가율"]].mean().head(6)

figure, ((ax1,ax2)) = plt.subplots(nrows=1, ncols=2)
figure.set_size_inches(18,8)

plt.rc('font', family='NanumBarunGothic')
take = sns.barplot(data = growth_df,
            x = "업종명", 
            y = '매출액증가율',
            ax = ax1,
            palette='coolwarm')
take.set_xticklabels(take.get_xticklabels(),rotation = 45)
take.set_xlabel("업종명")
take.set_ylabel("매출액증가율")
take.set_title('업종별 매출액증가율')
take.set(ylim = (0, 35))

operating = sns.barplot(data = growth_df,
            x = "업종명", 
            y = '영업이익증가율',
            ax = ax2,
            palette='coolwarm')
operating.set_xticklabels(operating.get_xticklabels(),rotation = 45)
operating.set_xlabel("업종명")
operating.set_ylabel("영업이익증가율")
operating.set_title('업종별 영업이익증가율')
operating.set(ylim = (-30, 1000))

# 활동성 재무지표 시각화
activity_df = Fin_industry.groupby(['업종명'],as_index=False)[["총자산회전율", "고정자산회전율"]].mean().head(6)

figure, ((ax1,ax2)) = plt.subplots(nrows=1, ncols=2)
figure.set_size_inches(18,8)

plt.rc('font', family='NanumBarunGothic')
total = sns.barplot(data = activity_df,
            x = "업종명", 
            y = '총자산회전율',
            ax = ax1,
            palette='coolwarm')
total.set_xticklabels(total.get_xticklabels(),rotation = 45)
total.set_xlabel("업종명")
total.set_ylabel("총자산회전율")
total.set_title('업종별 총자산회전율')
total.set(ylim = (0, 1.2))

fixed = sns.barplot(data = activity_df,
            x = "업종명", 
            y = '고정자산회전율',
            ax = ax2,
            palette='coolwarm')
fixed.set_xticklabels(fixed.get_xticklabels(),rotation = 45)
fixed.set_xlabel("업종명")
fixed.set_ylabel("고정자산회전율")
fixed.set_title('업종별 고정자산회전율')
fixed.set(ylim = (0, 3.5))

# 시장가치비율 재무지표 시각화
market_value_df = Fin_industry.groupby(['업종명'],as_index=False)[["PER", "PBR"]].mean().head(6)

figure, ((ax1,ax2)) = plt.subplots(nrows=1, ncols=2)
figure.set_size_inches(18,8)

plt.rc('font', family='NanumBarunGothic')
price_to_earnings_ratio = sns.barplot(data = market_value_df,
            x = "업종명", 
            y = 'PER',
            ax = ax1,
            palette='coolwarm')
price_to_earnings_ratio.set_xticklabels(price_to_earnings_ratio.get_xticklabels(),rotation = 45)
price_to_earnings_ratio.set_xlabel("업종명")
price_to_earnings_ratio.set_ylabel("PER")
price_to_earnings_ratio.set_title('업종별 PER')
price_to_earnings_ratio.set(ylim = (-40, 30))

price_book_value_ratio = sns.barplot(data = market_value_df,
            x = "업종명", 
            y = 'PBR',
            ax = ax2,
            palette='coolwarm')
price_book_value_ratio.set_xticklabels(price_book_value_ratio.get_xticklabels(),rotation = 45)
price_book_value_ratio.set_xlabel("업종명")
price_book_value_ratio.set_ylabel("PBR")
price_book_value_ratio.set_title('업종별 PBR')
price_book_value_ratio.set(ylim = (0, 2))

indus_name = Fin_industry["업종명"]
Fin_list = []
for indus_name in Fin_industry["업종명"].unique() :
  temp = Fin_industry[Fin_industry["업종명"] == indus_name]
  average = Fin_industry[Fin_industry["업종명"] == indus_name].mean(axis = 0)
  std = Fin_industry[Fin_industry["업종명"] == indus_name].std(axis = 0)
  standardization = (temp[temp["업종명"] == indus_name].drop(columns = ["회사명", "업종명"]) - average)/std

  stability = standardization["부채비율"]*(-1/3) + standardization["유동비율"]*(1/3) + standardization["고정비율"]*(-1/3)
  profitability = standardization["매출액영업이익률"]*0.5 + standardization["매출액세전순이익률"]*0.5
  growth = standardization["매출액증가율"]*0.5 + standardization["영업이익증가율"]*0.5
  activity = standardization["총자산회전율"]*0.5 + standardization["고정자산회전율"]*0.5
  market_value_ratio = standardization["PER"]*0.5 + standardization["PBR"]*0.5

  Fin_list.append(pd.concat([temp[["회사명", "업종명"]] ,standardization, stability, profitability, growth, activity, market_value_ratio],
            axis= 1).rename(columns = {0 : "안정성",
                                       1 : "수익성",
                                       2 : "성장성",
                                       3 : "활동성",
                                       4 : "시장가치비율"}))

financial_index = pd.DataFrame()
for i in range(len(Fin_list)) :
  financial_index = pd.concat([financial_index, Fin_list[i]])
financial_index.reset_index(drop = True, inplace = True)
financial_index

# 안정성 상위 10개 회사
stability_top10 = financial_index.sort_values(by=['안정성'], ascending=False).head(10)

# 안정성 상위 10개 회사
stability_top10 = financial_index.sort_values(by=['안정성'], ascending=False).head(10)

List = ['의약품 제조업', '전자부품 제조업','자동차 신품 부품 제조업','의료용 기기 제조업','통신 및 방송 장비 제조업','기타 금융업','기타 화학제품 제조업','기타 식품 제조업','전동기, 발전기 및 전기 변환ㆍ 공급ㆍ제어 장치 제조업']
# 안정성 상위 100개 회사
stability_top100 = financial_index[['회사명','안정성','업종명']].groupby(['업종명','회사명']).mean().sort_values(by=['안정성'], ascending=False).head(100)
stability_top100['업종명'] = stability_top100.index.get_level_values('업종명')
stability_top100_cat = stability_top100['업종명'].value_counts().rename_axis('업종명').reset_index(name='counts')
stability_top100_cat = stability_top100_cat[stability_top100_cat['counts'] > 2]

plt.figure(figsize=(25,10))
plt.rc('font', family='NanumBarunGothic')

plt.subplot(1,2,1)

g = sns.barplot(
    data= stability_top10,
    x= "회사명",
    y= "안정성",
    palette='coolwarm'
)
g.set_xlabel("회사명", fontsize = 20)
g.set_ylabel("안정성", fontsize = 20)
plt.title('안정성 높은 회사 top 10' ,size=25)

plt.subplot(1,2,2)

explode = [0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
colors = ['lightblue','orange', 'pink', 'purple', 'green', 'yellow', 'lightgreen','brown','red']
wedgeprops={'width': 0.7, 'edgecolor': 'w', 'linewidth': 2}

plt.pie(stability_top100_cat['counts'], labels=stability_top100_cat['업종명'] , 
        startangle=90, counterclock=False, autopct='%1.1f%%', 
        colors=colors, wedgeprops=wedgeprops, explode=explode)

plt.title('안정성 상위 100개 회사가 속한 업종들', fontsize=20)

# 수익성 상위 10개 회사
profitability_top10 = financial_index.sort_values(by=['수익성'], ascending=False).head(10)

# 수익성 상위 100개 회사
profitability_top100 = financial_index[['회사명','수익성','업종명']].groupby(['업종명','회사명']).mean().sort_values(by=['수익성'], ascending=False).head(100)
profitability_top100['업종명'] = profitability_top100.index.get_level_values('업종명')
profitability_top100_cat = profitability_top100['업종명'].value_counts().rename_axis('업종명').reset_index(name='counts')
profitability_top100_cat = profitability_top100_cat[profitability_top100_cat['counts'] > 2]

plt.figure(figsize=(25,10))
plt.rc('font', family='NanumBarunGothic')

plt.subplot(1,2,1)

g = sns.barplot(
    data= profitability_top10,
    x= "회사명",
    y= "수익성",
    palette='coolwarm'
)
g.set_xlabel("회사명", fontsize = 20)
g.set_ylabel("수익성", fontsize = 20)
plt.title('수익성 높은 회사 top 10' ,size=25)

plt.subplot(1,2,2)
explode = [0.1, 0.0, 0.0, 0.0, 0.0, 0.0,0.0]
colors = ['lightblue','orange', 'pink', 'purple', 'green', 'yellow', 'lightgreen']
wedgeprops={'width': 0.7, 'edgecolor': 'w', 'linewidth': 2}

plt.pie(profitability_top100_cat['counts'], labels = profitability_top100_cat['업종명'], 
        startangle=90, counterclock=False, autopct='%1.1f%%', 
        colors=colors, wedgeprops=wedgeprops, explode=explode)
plt.title('수익성 상위 100개 회사가 속한 업종들', fontsize=20)

# 성장성 상위 10개 회사
growth_top10 = financial_index.sort_values(by=['성장성'], ascending=False).head(10)

# 성장성 상위 100개 회사
growth_top100 = financial_index[['회사명','성장성','업종명']].groupby(['업종명','회사명']).mean().sort_values(by=['성장성'], ascending=False).head(100)
growth_top100['업종명'] = growth_top100.index.get_level_values('업종명')
growth_top100_cat = growth_top100['업종명'].value_counts().rename_axis('업종명').reset_index(name='counts')
growth_top100_cat = growth_top100_cat[growth_top100_cat['counts'] > 2]

plt.figure(figsize=(25,10))
plt.rc('font', family='NanumBarunGothic')

plt.subplot(1,2,1)

g = sns.barplot(
    data= growth_top10,
    x= "회사명",
    y= "성장성",
    palette='coolwarm'
)
g.set_xlabel("회사명", fontsize = 20)
g.set_ylabel("성장성", fontsize = 20)
plt.title('성장성 높은 회사 top 10' ,size=25)

plt.subplot(1,2,2)
explode = [0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
colors = ['lightblue','orange', 'pink', 'purple', 'green', 'yellow', 'lightgreen']
wedgeprops={'width': 0.7, 'edgecolor': 'w', 'linewidth': 2}

plt.pie(growth_top100_cat['counts'], labels=growth_top100_cat['업종명'], 
        startangle=90, counterclock=False, autopct='%1.1f%%', 
        colors=colors, wedgeprops=wedgeprops, explode=explode)
plt.title('성장성 상위 100개 회사가 속한 업종들', fontsize=20)

# 활동성 상위 10개 회사
activity_top10 = financial_index.sort_values(by=['활동성'], ascending=False).head(10)

# 활동성 상위 100개 회사
activity_top100 = financial_index[['회사명','활동성','업종명']].groupby(['업종명','회사명']).mean().sort_values(by=['활동성'], ascending=False).head(100)
activity_top100['업종명'] = activity_top100.index.get_level_values('업종명')
activity_top100_cat = activity_top100['업종명'].value_counts().rename_axis('업종명').reset_index(name='counts')
activity_top100_cat = activity_top100_cat[activity_top100_cat['counts'] > 2]

plt.figure(figsize=(25,10))
plt.rc('font', family='NanumBarunGothic')

plt.subplot(1,2,1)

g = sns.barplot(
    data= activity_top10,
    x= "회사명",
    y= "활동성",
    palette='coolwarm'
)
g.set_xlabel("회사명", fontsize = 20)
g.set_ylabel("활동성", fontsize = 20)
plt.title('활동성 높은 회사 top 10' ,size=25)

plt.subplot(1,2,2)
explode = [0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
colors = ['lightblue','orange', 'pink', 'purple', 'green', 'yellow', 'lightgreen']
wedgeprops={'width': 0.7, 'edgecolor': 'w', 'linewidth': 2}

plt.pie(activity_top100_cat['counts'], labels=activity_top100_cat['업종명'], 
        startangle=90, counterclock=False, autopct='%1.1f%%', 
        colors=colors, wedgeprops=wedgeprops, explode=explode)
plt.title('활동성 상위 100개 회사가 속한 업종들', fontsize=20)

# 시장가치비율 상위 10개 회사
market_value_ratio_top10 = financial_index.sort_values(by=['시장가치비율'], ascending=False).head(10)

# 시장가치비율 상위 100개 회사
market_value_ratio_top100 = financial_index[['회사명','시장가치비율','업종명']].groupby(['업종명','회사명']).mean().sort_values(by=['시장가치비율'], ascending=False).head(100)
market_value_ratio_top100['업종명'] = market_value_ratio_top100.index.get_level_values('업종명')
market_value_ratio_top100_cat = market_value_ratio_top100['업종명'].value_counts().rename_axis('업종명').reset_index(name='counts')
market_value_ratio_top100_cat = market_value_ratio_top100_cat[market_value_ratio_top100_cat['counts'] > 2]

plt.figure(figsize=(25,10))
plt.rc('font', family='NanumBarunGothic')

plt.subplot(1,2,1)

g = sns.barplot(
    data= market_value_ratio_top10,
    x= "회사명",
    y= "시장가치비율",
    palette='coolwarm'
)
g.set_xlabel("회사명", fontsize = 20)
g.set_ylabel("시장가치비율", fontsize = 20)
plt.title('시장가치비율 높은 회사 top 10' ,size=25)

plt.subplot(1,2,2)
explode = [0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
colors = ['lightblue','orange', 'pink', 'purple', 'green', 'yellow', 'lightgreen']
wedgeprops={'width': 0.7, 'edgecolor': 'w', 'linewidth': 2}

plt.pie(market_value_ratio_top100_cat['counts'], labels=market_value_ratio_top100_cat['업종명'], 
        startangle=90, counterclock=False, autopct='%1.1f%%', 
        colors=colors, wedgeprops=wedgeprops, explode=explode)
plt.title('시장가치비율 상위 100개 회사가 속한 업종들', fontsize=20)

# AHP분석을 시행해주는 함수 생성
def preference_calculation():

  def pairwise_comparison(A, B) :
    while True :
      importance = str(input("기업의 특징 중 " + str(A) + "과 " +str(B) + " 중 무엇이 더 중요한지를 입력해주세요."))
      if importance == "안정성" or importance == "불황에도 부도를 내지 않을 능력" or importance == "불황에도 부도를 내지 않을 능력(안정성)":
        importance = "\'불황에도 부도를 내지 않을 능력(안정성)\'"
      elif importance == "수익성" or importance == "수익 창출로 많은 이익을 남기는 능력" or importance == "수익 창출로 많은 이익을 남기는 능력(수익성)" :
        importance = "\'수익 창출로 많은 이익을 남기는 능력(수익성)\'"
      elif importance == "성장성" or importance == "매출과 이익의 성장가능성이 높은 능력" or importance == "매출과 이익의 성장가능성이 높은 능력(성장성)" :
        importance = "\'매출과 이익의 성장가능성이 높은 능력(성장성)\'"
      elif importance == "활동성" or importance == "기업이 자산을 효율적으로 이용하는 능력" or importance == "기업이 자산을 효율적으로 이용하는 능력(활동성)" :
        importance = "\'기업이 자산을 효율적으로 이용하는 능력(활동성)\'"
      elif importance == "시장가치비율" or importance == "주식 시장에서 높은 평가를 받는 능력" or importance == "주식 시장에서 높은 평가를 받는 능력(시장가치비율)" :
        importance = "\'주식 시장에서 높은 평가를 받는 능력(시장가치비율)\'"

      if importance == A : 
        temp = int(input("기업의 특징 중 " + str(A) + "이 " + str(B) + "에 비해 얼마나 중요한지를 1부터 9까지의 숫자로 표현해주세요. \n1은 " + str(A) + "과 " + str(B) + "의 중요도가 같음을 의미하고, 9는 " + str(A) + "이 " + str(B) + " 보다 절대적으로 중요함을 의미합니다.\n"))
        break
      elif importance == B :
        temp = 1/int(input("기업의 특징 중 " + str(B) + "이 " + str(A) + "에 비해 얼마나 중요한지를 1부터 9까지의 숫자로 표현해주세요. \n1은 " + str(B) + "과 " + str(A) + "의 중요도가 같음을 의미하고, 9는 " + str(B) + "이 " + str(A) + " 보다 절대적으로 중요함을 의미합니다.\n"))
        break
      elif (importance != A) or (importance != B) :
        print("잘못 입력하셨습니다. 다시 답변해주세요.")
    return temp


  CR = 1
  while CR >= 0.2 :

    # 쌍대비교 입력
    stabVSprofit = pairwise_comparison("\'불황에도 부도를 내지 않을 능력(안정성)\'", "\'수익 창출로 많은 이익을 남기는 능력(수익성)\'")
    stabVSgrowth = pairwise_comparison("\'불황에도 부도를 내지 않을 능력(안정성)\'", "\'매출과 이익의 성장가능성이 높은 능력(성장성)\'")
    stabVSactivity = pairwise_comparison("\'불황에도 부도를 내지 않을 능력(안정성)\'", "\'기업이 자산을 효율적으로 이용하는 능력(활동성)\'")
    stabVSmarketvalue = pairwise_comparison("\'불황에도 부도를 내지 않을 능력(안정성)\'", "\'주식 시장에서 높은 평가를 받는 능력(시장가치비율)\'")
    profitVSgrowth = pairwise_comparison("\'수익 창출로 많은 이익을 남기는 능력(수익성)\'", "\'매출과 이익의 성장가능성이 높은 능력(성장성)\'")
    profitVSactivity = pairwise_comparison("\'수익 창출로 많은 이익을 남기는 능력(수익성)\'", "\'기업이 자산을 효율적으로 이용하는 능력(활동성)\'")
    profitVSmarketvalue = pairwise_comparison("\'수익 창출로 많은 이익을 남기는 능력(수익성)\'", "\'주식 시장에서 높은 평가를 받는 능력(시장가치비율)\'")
    growthVSactivity = pairwise_comparison("\'매출과 이익의 성장가능성이 높은 능력(성장성)\'", "\'기업이 자산을 효율적으로 이용하는 능력(활동성)\'")
    growthVSmarketvalue = pairwise_comparison("\'매출과 이익의 성장가능성이 높은 능력(성장성)\'", "\'주식 시장에서 높은 평가를 받는 능력(시장가치비율)\'")
    activityVSmarketvalue = pairwise_comparison("\'기업이 자산을 효율적으로 이용하는 능력(활동성)\'", "\'주식 시장에서 높은 평가를 받는 능력(시장가치비율)\'")

    # 쌍대비교행렬
    pairwise_comparison = np.array([
                   [1, stabVSprofit, stabVSgrowth, stabVSactivity, stabVSmarketvalue], 
                   [1/stabVSprofit, 1, profitVSgrowth, profitVSactivity, profitVSmarketvalue], 
                   [1/stabVSgrowth, 1/profitVSgrowth, 1, growthVSactivity, growthVSmarketvalue],
                   [1/stabVSactivity, 1/profitVSactivity, 1/growthVSactivity, 1, activityVSmarketvalue], 
                   [1/stabVSmarketvalue, 1/profitVSmarketvalue, 1/growthVSmarketvalue, 1/activityVSmarketvalue, 1]
                   ])
    # 쌍대비교행렬 열별 요소들의 합
    col_sums = pairwise_comparison.sum(axis=0)

    # 쌍대비교행렬 열별로 표준화
    standard_comparison = pairwise_comparison / col_sums

    # 항목별 선호도(가중치) 산출
    preference = standard_comparison.mean(axis=1)

    # 일관성비율 CR = CI/RI
    CI = (np.mean(pairwise_comparison @ preference/preference) - 5)/4
    RI = 1.12 # matrix size가 5일때 RI = 1.12로 알려져있다.
    CR = CI / RI

    if CR >= 0.2 :
      print("------------------------------------------------------------------------------------ ")
      print("\n 답변이 일관적이지 않아 정확한 선호도 산출이 불가능합니다. 다시 답변 부탁드립니다. \n")
      print("------------------------------------------------------------------------------------")
      continue
    else :
      print("기업 특징에 대한 이용자님의 선호도는 다음과 같습니다. \n")
      print("불황에도 부도를 내지 않을 능력(안정성) : ", round(preference[0], 2), "\n"
            "수익 창출로 많은 이익을 남기는 능력(수익성) : ", round(preference[1], 2), "\n"
            "매출과 이익의 성장가능성이 높은 능력(성장성) : ", round(preference[2], 2), "\n"
            "기업이 자산을 효율적으로 이용하는 능력(활동성) : ", round(preference[3], 2), "\n"
            "주식 시장에서 높은 평가를 받는 능력(시장가치비율) : ", round(preference[4], 2))
  
  return pd.DataFrame(preference, index = ["안정성", "수익성", "성장성", "활동성", "시장가치비율"], columns = ["선호도"])

# 가상의 구직자를 설정하여 맞춤형 기업 선호도 산출
preference = preference_calculation()

# 이용자의 선호도
preference_plot = preference.copy()
property_index = round(preference_plot["선호도"], 2)
preference_plot["선호도"] = property_index
preference_plot["재무특성"] = preference_plot.index
preference_plot = pd.DataFrame(preference_plot.sort_values("선호도",ascending = False))

explode = [0.1, 0.0, 0.0, 0.0, 0.0]
colors = ['lightblue','orange', 'pink', 'purple', 'green', 'yellow', 'lightgreen']
wedgeprops={'width': 0.7, 'edgecolor': 'w', 'linewidth': 2}

plt.pie(preference_plot['선호도'], labels=preference_plot['재무특성'], 
        startangle=90, counterclock=False, autopct='%1.1f%%', 
        colors=colors, wedgeprops=wedgeprops, explode=explode)
plt.title('표솔빈님의 재무특성 선호도', fontsize=25)

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

financial_index['업종명'].value_counts()

financial_index.dropna(axis = 0, inplace = True)

financial_index = financial_index[["회사명","업종명","안정성", "수익성", "성장성", "활동성", "시장가치비율"]]

financial_index.dropna(axis = 0, inplace = True)
financial_index = financial_index[["회사명","업종명","안정성", "수익성", "성장성", "활동성", "시장가치비율"]]

financial_index = financial_index.set_index('회사명')

financial_index.reset_index(inplace = True)

financial_index.head()

med_preference = financial_index[financial_index["업종명"] == "컴퓨터 프로그래밍, 시스템 통합 및 관리업"]

med_preference.head()

med_preference = med_preference.set_index('회사명')

med_preference = med_preference.drop(columns = [ "업종명"])

# 해당 구직자의 기업별 선호도 top10 산출
top10_med = (med_preference@preference).sort_values(by = "선호도",ascending = False).head(10)

# 이용자의 기업 선호도
top10_med_plot = top10_med.copy()
property_index = round(top10_med_plot["선호도"], 2)
top10_med_plot["선호도"] = property_index
top10_med_plot["기업명"] = top10_med_plot.index
top10_med_plot = pd.DataFrame(top10_med_plot.sort_values("선호도",ascending = False))

plt.rc('font', family='NanumBarunGothic')
sns_top10_med_plot = sns.barplot(data = top10_med_plot,
                       x = "기업명",
                       y = "선호도",
                       palette='coolwarm')
num_plot.set_xlabel("기업명")
num_plot.set_ylabel("선호도")
sns.set(rc={'figure.figsize':(10,8)})
sns_top10_med_plot.set_title('해당 구직자의 기업별 선호도')

for p in sns_top10_med_plot.patches:
    height = p.get_height()
    sns_top10_med_plot.text(p.get_x() + p.get_width() / 2., height+0.005, height, ha = 'center', size = 12)

plt.show()

financial_index.dropna(axis = 0, inplace = True)

rader_com = financial_index[['회사명','안정성','수익성','성장성','활동성','시장가치비율']]
rader_com[['안정성','수익성','성장성','활동성','시장가치비율']] = rader_com[['안정성','수익성','성장성','활동성','시장가치비율']]*1.5
rader_com = rader_com.loc[(rader_com['회사명'] == '오파스넷') | (rader_com['회사명'] == '윈스') | (rader_com['회사명'] == '아이크래프트')]
rader_com = rader_com.sort_values(by='활동성', ascending=False)[0:3]
l = [0, 1, 2]
rader_com = rader_com.set_index(keys=[l], inplace=False)
rader_com

## 따로 그리기
labels = rader_com.columns[1:]
num_labels = len(labels)
    
angles = [x/float(num_labels)*(2*pi) for x in range(num_labels)] ## 각 등분점
angles += angles[:1] ## 시작점으로 다시 돌아와야하므로 시작점 추가
    
my_palette = plt.cm.get_cmap("Set2", len(rader_com.index))

fig = plt.figure(figsize=(15,20))
fig.set_facecolor('white')

plt.rc('font', family='NanumBarunGothic')
for i, row in rader_com.iterrows():
    color = my_palette(i)
    data = rader_com.iloc[i].drop('회사명').tolist()
    data += data[:1]
    
    ax = plt.subplot(3,2,i+1, polar=True)
    ax.set_theta_offset(pi / 2) ## 시작점
    ax.set_theta_direction(-1) ## 그려지는 방향 시계방향
    
    plt.xticks(angles[:-1], labels, fontsize=13) ## x축 눈금 라벨
    ax.tick_params(axis='x', which='major', pad=15) ## x축과 눈금 사이에 여백을 준다.

    ax.set_rlabel_position(0) ## y축 각도 설정(degree 단위)
    plt.yticks([-9,-6,-3,0,3,6,9],['-9','-6','-3','0','3','6','9'], fontsize=10) ## y축 눈금 설정
    plt.ylim(-9,9)
    
    ax.plot(angles, data, color=color, linewidth=2, linestyle='solid') ## 레이더 차트 출력
    ax.fill(angles, data, color=color, alpha=0.4) ## 도형 안쪽에 색을 채워준다.
    
    plt.title(row.회사명, size=20, color=color,x=-0.2, y=1.2, ha='left') ## 타이틀은 캐릭터 클래스로 한다.

plt.tight_layout(pad=5) ## subplot간 패딩 조절
plt.show()

